# -*- coding: utf-8 -*-
"""Heart Attack Analysis & Prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J1D6OEncB-NcgXW8Lhp75BU3-C6NS4zI
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split,GridSearchCV
from sklearn.metrics import accuracy_score,roc_curve
import warnings
warnings.filterwarnings("ignore")

df = pd.read_csv("/content/heart.csv")

df.head(5)

df.describe()

df.info()

df.isnull().sum()

df.columns

df["sex"].value_counts()

for i in list(df.columns):
  print("{}--{}".format(i,df[i].value_counts().shape[0]))

categorical_list = ["sex", "cp","fbs","restecg","exng","slp","caa","thall","output"]

df_categoric = df.loc[:,categorical_list]
for i in categorical_list:
  plt.figure()
  sns.countplot(x=i,data=df_categoric,hue="output")
  plt.title(i)

numeric_list = ["age", "trtbps","chol","thalachh","oldpeak","output"]

df_numeric = df.loc[:,numeric_list]
sns.pairplot(df_numeric,hue="output",diag_kind="kde")
plt.show()

scaler = StandardScaler()
scaler

scaled_array = scaler.fit_transform(df[numeric_list[:-1]])

scaled_array

df_dummy = pd.DataFrame(scaled_array,columns=numeric_list[:-1])
df_dummy.head()

df_dummy = pd.concat([df_dummy,df.loc[:,"output"]],axis=1)
df_dummy.head()

data_melted = pd.melt(df_dummy,id_vars="output",var_name="features",value_name="value")
data_melted.head(20)

plt.figure()
sns.boxplot(x="features",y="value",hue="output",data=data_melted)
plt.show()

plt.figure()
sns.swarmplot(x="features",y="value",hue="output",data=data_melted)
plt.show()

sns.catplot(x = "exng", y = "age", hue = "output", col = "sex", kind = "swarm", data = df)
plt.show()

df.corr()

plt.figure(figsize=(12,8))
sns.heatmap(df.corr(),annot=True,linewidths=0.7)
plt.show()

numeric_list = ["age", "trtbps","chol","thalachh","oldpeak"]
df_numeric=df.loc[:,numeric_list]
df_numeric.head()

df.describe()

# outlier detection
for i in numeric_list:
    
    # IQR
    Q1 = np.percentile(df.loc[:, i],25)
    Q3 = np.percentile(df.loc[:, i],75)
    
    IQR = Q3 - Q1
    
    print("Old shape: ", df.loc[:, i].shape)
    
    # upper bound
    upper = np.where(df.loc[:, i] >= (Q3 +2.5*IQR))
    
    # lower bound
    lower = np.where(df.loc[:, i] <= (Q1 - 2.5*IQR))
    
    print("{} -- {}".format(upper, lower))
    
    try:
        df.drop(upper[0], inplace = True)
    except: print("KeyError: {} not found in axis".format(upper[0]))
    
    try:
        df.drop(lower[0], inplace = True)
    except:  print("KeyError: {} not found in axis".format(lower[0]))
        
    print("New shape: ", df.shape)

df1 = df.copy()

df1 = pd.get_dummies(df1,columns=categorical_list[:-1],drop_first=True)
df1.head()

X = df1.drop(["output"],axis=1)
Y = df1[["output"]]

X.head()

Y.head()

scaler = StandardScaler()
scaler

X[numeric_list[:-1]] = scaler.fit_transform(X[numeric_list[:-1]])
X.head()

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.1, random_state = 3)
print("X_train: {}".format(X_train.shape))
print("X_test: {}".format(X_test.shape))
print("y_train: {}".format(Y_train.shape))
print("y_test: {}".format(Y_test.shape))

logreg = LogisticRegression()
logreg

logreg.fit(X_train, Y_train)

X_test

y_pred_prob = logreg.predict_proba(X_test)
y_pred_prob

y_pred = np.argmax(y_pred_prob, axis = 1)
y_pred

dummy_ = pd.DataFrame(y_pred_prob)
dummy_["y_pred"] = y_pred
dummy_.head()

print("Test accuracy: {}".format(accuracy_score(y_pred, Y_test)))

fpr, tpr, thresholds = roc_curve(Y_test, y_pred_prob[:,1])

plt.plot([0,1],[0,1],"k--")
plt.plot(fpr, tpr, label = "Logistic Regression")
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("Logistic Regression ROC Curve")
plt.show()

lr = LogisticRegression()
lr

penalty = ["l1", "l2"]

parameters = {"penalty":penalty}

lr_searcher = GridSearchCV(lr, parameters)

lr_searcher.fit(X_train, Y_train)

print("Best parameters: ",lr_searcher.best_params_)

y_pred = lr_searcher.predict(X_test)

print("Test accuracy: {}".format(accuracy_score(y_pred, Y_test)))